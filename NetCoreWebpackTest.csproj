<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <TypeScriptToolsVersion>2.5</TypeScriptToolsVersion>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
  </ItemGroup>
  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.1" />
  </ItemGroup>
    <ItemGroup>
    <WebpackInputs Include="app\**\*" />
    <WebpackInputs Include="webpack.config.ts" />
  </ItemGroup>
  <ItemGroup>
    <WebpackOutputs Include="wwwroot\assets\**\*" />
    <WebpackOutputs Include="wwwroot\css\**\*" />
    <WebpackOutputs Include="wwwroot\js\**\*" />
  </ItemGroup>
  <ItemGroup Condition="'@(WebpackOutputs)' == ''">
    <!-- 
      MSBuild skips a target if the Outputs item group evaluates to empty.
      On the first build, there won't be any Webpack outputs (and we can't
      predict what they will be because we don't know the hash results for
      filenames), so instead we tell MSBuild there's an output file which
      will never exist, which forces the target to always run on first
      build.
    -->
    <WebpackOutputs Include="wwwroot\nonexistent.dat" />
  </ItemGroup>
  <Target Name="BuildClientAssets" BeforeTargets="BeforeBuild;MvcRazorPrecompile" Inputs="@(WebpackInputs)" Outputs="@(WebpackOutputs)">
    <Exec Command="node_modules\.bin\webpack --progress" />
    <ItemGroup>
      <MvcRazorFilesToCompile Include="Pages\Shared\Assets\*.cshtml" />
    </ItemGroup>
  </Target>
  <Target Name="PrecompileRazorViews" AfterTargets="Build;BuildClientAssets" DependsOnTargets="MvcRazorPrecompile" />
</Project>
